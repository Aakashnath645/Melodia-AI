
import { GoogleGenAI, Type } from "@google/genai";

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const musicTheorySchema = {
  type: Type.OBJECT,
  properties: {
    name: {
      type: Type.STRING,
      description: "The official name of the musical scale or chord, e.g., 'C Major Scale' or 'G Dominant 7th'."
    },
    type: {
      type: Type.STRING,
      description: "The type of musical element. Should be 'scale', 'chord', or 'unknown' if it cannot be determined.",
      enum: ['scale', 'chord', 'unknown']
    },
    notes: {
      type: Type.ARRAY,
      description: "An array of strings, where each string is a note in the scale or chord. Use '#' for sharps, e.g., 'C#'.",
      items: {
        type: Type.STRING
      }
    },
    explanation: {
        type: Type.STRING,
        description: "A brief, one-sentence explanation of the scale or chord's musical quality or common usage."
    }
  },
  required: ['name', 'type', 'notes', 'explanation']
};

export const analyzeMusicTheory = async (prompt: string) => {
  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: `Analyze the following music theory request and provide the corresponding notes. Request: "${prompt}"`,
      config: {
        responseMimeType: "application/json",
        responseSchema: musicTheorySchema,
      },
    });
    
    const parsed = JSON.parse(response.text);
    return parsed;
  } catch (error) {
    console.error("Error analyzing music theory:", error);
    throw new Error("Failed to analyze music theory request. The model might not have recognized the input.");
  }
};


export const generateImage = async (prompt: string): Promise<string> => {
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
              numberOfImages: 1,
              outputMimeType: 'image/jpeg',
              aspectRatio: '1:1',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            return response.generatedImages[0].image.imageBytes;
        } else {
            throw new Error("No image was generated by the API.");
        }
    } catch (error) {
        console.error("Error generating image:", error);
        throw new Error("Failed to generate image.");
    }
}
